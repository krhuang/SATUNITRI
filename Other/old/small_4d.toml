# Configuration file for the polytope triangulation script.

[files]
# Path to the file containing the polytope vertices.
polytopes_file = "small-lattice-polytopes/data/4-polytopes/v24.txt"

# Optional: Path to a log file. If non-empty, all console output will be written here.
# Example: "run_log.txt"
log_file = ""

[run_settings]
# Which polytopes from the file to process.
process_range = "-"

# The order in which to process them.
# Options: "normal", "reversed", "random"
processing_order = "normal"

# How to sort polytopes before processing.
# "none": Use the order from the file.
# "P": Sort by the number of lattice points, ascending.
# "S": Sort by the number of simplices, ascending.
sort_by = "none"

# If true, removes all simplices containing the origin (0,0,0) before solving.
remove_origin_simplices = false

# If true, the search includes all non-degenerate simplices.
# If false, it is restricted to only unimodular simplices.
find_all_simplices = false

# The backend for computing tetrahedra intersections.
# Options: "cpu", "gpu"
intersection_backend = "gpu"

[output_levels]
# Output level for the terminal. Options: "verbose", "minimal", "none"
terminal_output = "minimal"

# Terminal output mode. "multi-line" prints a new line for each polytope.
# "single-line" updates a single line in place (terminal only).
terminal_mode = "multi-line"

# Output level for the log file. Options: "verbose", "minimal", "none"
file_output = "none"

# Controls how many SAT solutions (triangulations) are found.
# "first": Stop after finding one solution.
# "all": Find all possible solutions.
# "count_only": Efficiently count all solutions without storing them.
solution_reporting = "first"

[verbose_options]
# These toggles only apply when an output level is set to "verbose".
show_initial_vertices = false
show_solution_simplices = false # If solution_reporting="all", this shows all solutions.
show_timing_summary = true

[solver_options]
# The SAT solver to use. PicoSAT or CryptoMiniSat, PicoSAT is default
solver = "PicoSAT"

[plotting]
# The python script to execute for plotting a triangulation.
plotter_script = "plot_triangulation.py"

# Which polytopes to plot if a valid triangulation is found.
# This will plot the *first* valid triangulation found for a given polytope.
# Examples: "1-5", "3", "10-", "" (for none).
plot_range = "50-53"
